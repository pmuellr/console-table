// Generated by CoffeeScript 1.3.1
/* Licensed under the Apache License, Version 2.0. See footer for details
*/

var Column, Grid, alignLeft, alignRight, consoleTable, generateGrid, installInBrowser, installInCJS, isScalar, toString, _;

_ = require("underscore");

consoleTable = function(object) {
  var column, columnNames, columns, grid, line, logger, matrix, name, row, _i, _j, _len, _len1, _results;
  grid = generateGrid(object);
  matrix = grid.getTextCells();
  columns = grid.getColumns();
  logger = consoleTable.logger || function(line) {
    return console.log(line);
  };
  if (!matrix.length || !matrix[0].length) {
    logger("||");
    return;
  }
  columnNames = [];
  for (_i = 0, _len = columns.length; _i < _len; _i++) {
    column = columns[_i];
    name = column.name;
    if (column.alignLeft) {
      name = alignLeft(name, column.width);
    } else {
      name = alignRight(name, column.width);
    }
    columnNames.push(name);
  }
  columnNames = columnNames.join(" | ");
  columnNames = "| " + columnNames + " |";
  logger(columnNames);
  line = alignLeft("", columnNames.length);
  line = line.replace(/\s/g, "-");
  logger(line);
  _results = [];
  for (_j = 0, _len1 = matrix.length; _j < _len1; _j++) {
    row = matrix[_j];
    line = row.join(" | ");
    line = "| " + line + " |";
    _results.push(logger(line));
  }
  return _results;
};

generateGrid = function(object) {
  var cell, cellIndex, element, grid, key, rowObject, value, _i, _j, _len, _len1;
  grid = new Grid;
  rowObject = {};
  if (_.isArray(object)) {
    for (_i = 0, _len = object.length; _i < _len; _i++) {
      element = object[_i];
      if (isScalar(element)) {
        rowObject["{value}"] = element;
      } else if (_.isArray(element)) {
        cellIndex = 0;
        for (_j = 0, _len1 = element.length; _j < _len1; _j++) {
          cell = element[_j];
          rowObject[cellIndex++] = cell;
        }
      } else {
        rowObject = element;
      }
    }
  } else if (_.isObject(object || _.isFunction(object))) {
    for (key in object) {
      value = object[key];
      rowObject = {
        key: key,
        value: value
      };
    }
  } else {
    rowObject = {
      value: toString(object)
    };
  }
  grid.addRow(rowObject);
  return grid;
};

Grid = (function() {

  Grid.name = 'Grid';

  function Grid() {
    this.rows = 0;
    this.columns = [];
  }

  Grid.prototype.addRow = function(object) {
    var column, key, val;
    for (key in object) {
      val = object[key];
      if (_.isFunction(val)) {
        continue;
      }
      column = this._getColumn(key);
      column.addCell(this.rows, val);
    }
    return this.rows++;
  };

  Grid.prototype.getTextCells = function() {
    var column, i, result, row, _i, _j, _len, _ref, _ref1;
    result = [];
    for (i = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      row = [];
      _ref1 = this.columns;
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        column = _ref1[_j];
        row.push(column.getCell(i));
      }
      result.push(row);
    }
    return result;
  };

  Grid.prototype.getColumns = function() {
    return this.columns;
  };

  Grid.prototype._getColumn = function(label) {
    var column, _i, _len, _ref;
    _ref = this.columns;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      if (column.name === label) {
        return column;
      }
    }
    column = new Column(label);
    if (label === "<value>") {
      this.columns.unshift(column);
    } else {
      this.columns.push(column);
    }
    return column;
  };

  return Grid;

})();

Column = (function() {

  Column.name = 'Column';

  function Column(name) {
    this.name = name;
    this.cells = [];
    this.alignLeft = null;
    this.width = this.name.length;
  }

  Column.prototype.addCell = function(rowIndex, object) {
    var text;
    if (!_.isNumber(object)) {
      this.alignLeft = true;
    } else if (this.alignLeft === null) {
      this.alignLeft = false;
    }
    text = "" + object;
    this.cells[rowIndex] = text;
    if (text.length > this.width) {
      return this.width = text.length;
    }
  };

  Column.prototype.getCell = function(rowIndex) {
    var cell;
    cell = this.cells[rowIndex];
    if (cell === void 0) {
      cell = "";
    }
    if (this.alignLeft) {
      return alignLeft(cell, this.width);
    } else {
      return alignRight(cell, this.width);
    }
  };

  return Column;

})();

alignLeft = function(string, width) {
  while (string.length < width) {
    string = "" + string + " ";
  }
  return string;
};

alignRight = function(string, width) {
  while (string.length < width) {
    string = " " + string;
  }
  return string;
};

isScalar = function(object) {
  if (_.isObject(object)) {
    return false;
  }
  if (_.isFunction(object)) {
    return false;
  }
  return true;
};

toString = function(object) {
  if (_.isFunction(object)) {
    return "{function}";
  }
  if (object === void 0) {
    return "";
  }
  if (object === null) {
    return "null";
  }
  return object.toString();
};

installInBrowser = function(func) {
  if (typeof window === "undefined") {
    return;
  }
  if (typeof window.console === "undefined") {
    return;
  }
  if (window.console.table) {
    return;
  }
  return window.console.table = func;
};

installInCJS = function(func) {
  if (typeof module === "undefined") {
    return;
  }
  if (typeof module.exports === "undefined") {
    return;
  }
  return module.exports = func;
};

installInBrowser(consoleTable);

installInCJS(consoleTable);

/*
#-------------------------------------------------------------------------------
# Copyright 2012 Patrick Mueller
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
*/

